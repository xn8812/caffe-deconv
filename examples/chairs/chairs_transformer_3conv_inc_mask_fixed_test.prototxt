name: "chairs_transformer"
input: "images"
input_dim: 31
input_dim: 3
input_dim: 64
input_dim: 64
input: "rotations"
input_dim: 31
input_dim: 3
input_dim: 1
input_dim: 1
#----------------------------encoder-conv---------------------------
layers {
  name: "conv1-encoder"
  type: CONVOLUTION
  bottom: "images"
  top: "conv1-encoder"
  blobs_lr: 1
  blobs_lr: 2
  convolution_param {
    num_output: 64
    kernel_size: 5
    pad: 2
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layers {
  name: "relu1-encoder"
  type: RELU
  bottom: "conv1-encoder"
  top: "conv1-encoder"
}
layers {
  name: "pool1-encoder"
  type: DOWNSAMPLING
  bottom: "conv1-encoder"
  top: "pool1-encoder"
  downsampling_param {
    kernel_size: 2
  }
}
layers {
  name: "conv2-encoder"
  type: CONVOLUTION
  bottom: "pool1-encoder"
  top: "conv2-encoder"
  blobs_lr: 1
  blobs_lr: 2
  convolution_param {
    num_output: 128
    kernel_size: 5
    pad: 2
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layers {
  name: "relu2-encoder"
  type: RELU
  bottom: "conv2-encoder"
  top: "conv2-encoder"
}
layers {
  name: "pool2-encoder"
  type: DOWNSAMPLING
  bottom: "conv2-encoder"
  top: "pool2-encoder"
  downsampling_param {
    kernel_size: 2
  }
}
layers {
  name: "conv3-encoder"
  type: CONVOLUTION
  bottom: "pool2-encoder"
  top: "conv3-encoder"
  blobs_lr: 1
  blobs_lr: 2
  convolution_param {
    num_output: 256
    kernel_size: 5
    pad: 2
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layers {
  name: "relu3-encoder"
  type: RELU
  bottom: "conv3-encoder"
  top: "conv3-encoder"
}
layers {
  name: "pool3-encoder"
  type: DOWNSAMPLING
  bottom: "conv3-encoder"
  top: "pool3-encoder"
  downsampling_param {
    kernel_size: 2
  }
}
#----------------------------encoder-fc---------------------------
layers {
  name: "fc1-encoder"
  type: INNER_PRODUCT
  bottom: "pool3-encoder"
  top: "fc1-encoder"
  blobs_lr: 1
  blobs_lr: 2
  inner_product_param {
    num_output: 1024
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layers {
  name: "relu4-encoder"
  type: RELU
  bottom: "fc1-encoder"
  top: "fc1-encoder"
}
layers {
  name: "fc2-encoder"
  type: INNER_PRODUCT
  bottom: "fc1-encoder"
  top: "fc2-encoder"
  blobs_lr: 1
  blobs_lr: 2
  inner_product_param {
    num_output: 1024
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layers {
  name: "relu5-encoder"
  type: RELU
  bottom: "fc2-encoder"
  top: "fc2-encoder"
}
#==============================Encoder=============================
layers {
  name: "fc1-id"
  type: INNER_PRODUCT
  bottom: "fc2-encoder"
  top: "fc1-id"
  blobs_lr: 1
  blobs_lr: 2
  inner_product_param {
    num_output: 512
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layers {
  name: "relu1-id"
  type: RELU
  bottom: "fc1-id"
  top: "fc1-id"
}
layers {
  name: "fc1-view"
  type: INNER_PRODUCT
  bottom: "fc2-encoder"
  top: "fc1-view"
  blobs_lr: 1
  blobs_lr: 2
  inner_product_param {
    num_output: 512
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layers {
  name: "relu1-view"
  type: RELU
  bottom: "fc1-view"
  top: "fc1-view"
}
layers {
  name: "tp1-view"
  type: TENSOR_PRODUCT
  bottom: "fc1-view"
  bottom: "rotations"
  top: "tp1-view"
  blobs_lr: 1
  blobs_lr: 2
  inner_product_param {
    num_output: 512
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layers {
  name: "relu2-view"
  type: RELU
  bottom: "tp1-view"
  top: "tp1-view"
}
#--------------------------concat-view-id-var-------------------------
layers {
  name: "concat"
  type: CONCAT
  bottom: "fc1-id"
  bottom: "tp1-view"
  top: "concat"
  concat_param {
    concat_dim: 1
  }
}
#====================== decoder ===========================
layers {
  name: "fc3-decoder"
  type: INNER_PRODUCT
  bottom: "concat"
  top: "fc3-decoder"
  blobs_lr: 1
  blobs_lr: 2
  inner_product_param {
    num_output: 1024
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layers {
  name: "relu3-decoder"
  type: RELU
  bottom: "fc3-decoder"
  top: "fc3-decoder"
}
layers {
  name: "fc2-decoder"
  type: INNER_PRODUCT
  bottom: "fc3-decoder"
  top: "fc2-decoder"
  blobs_lr: 1
  blobs_lr: 2
  inner_product_param {
    num_output: 1024
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layers {
  name: "relu2-decoder"
  type: RELU
  bottom: "fc2-decoder"
  top: "fc2-decoder"
}
#----------------------------image-fc---------------------------
layers {
  name: "fc1-image"
  type: INNER_PRODUCT
  bottom: "fc2-decoder"
  top: "fc1-image"
  blobs_lr: 1
  blobs_lr: 2
  inner_product_param {
    num_output: 16384
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layers {
  name: "relu4-image"
  type: RELU
  bottom: "fc1-image"
  top: "fc1-image"
}
layers {
  name: "fold-image"
  type: FOLDING
  bottom: "fc1-image"
  top: "fold-image"
  folding_param {
    channels_folded: 256
    height_folded: 8
    width_folded: 8
  }
}
#----------------------------image-upsampling-16x16-convolution-relu-layer-1---------------------------
layers {
  name: "up1-image"
  type: UPSAMPLING
  bottom: "fold-image"
  top: "up1-image"
  upsampling_param {
    kernel_size: 2
  }
}
layers {
  name: "conv1-image"
  type: CONVOLUTION
  bottom: "up1-image"
  top: "conv1-image"
  blobs_lr: 1
  blobs_lr: 2
  convolution_param {
    num_output: 128
    kernel_size: 5
    pad: 2
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layers {
  name: "relu3-image"
  type: RELU
  bottom: "conv1-image"
  top: "conv1-image"
}
#----------------------------image-upsampling-32x32-convolution-relu-layer-2---------------------------
layers {
  name: "up2-image"
  type: UPSAMPLING
  bottom: "conv1-image"
  top: "up2-image"
  upsampling_param {
    kernel_size: 2
  }
}
layers {
  name: "conv2-image"
  type: CONVOLUTION
  bottom: "up2-image"
  top: "conv2-image"
  blobs_lr: 1
  blobs_lr: 2
  convolution_param {
    num_output: 64
    kernel_size: 5
    pad: 2
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layers {
  name: "relu2-image"
  type: RELU
  bottom: "conv2-image"
  top: "conv2-image"
}
#----------------------------image-upsampling-64x64-convolution-relu-layer-3---------------------------
layers {
  name: "up3-image"
  type: UPSAMPLING
  bottom: "conv2-image"
  top: "up3-image"
  upsampling_param {
    kernel_size: 2
  }
}
layers {
  name: "conv3-image"
  type: CONVOLUTION
  bottom: "up3-image"
  top: "conv3-image"
  blobs_lr: 1
  blobs_lr: 2
  convolution_param {
    num_output: 3
    kernel_size: 5
    pad: 2
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
  loss_weight: 10.0
}
#----------------------------mask-fc---------------------------
layers {
  name: "fc1-mask"
  type: INNER_PRODUCT
  bottom: "fc2-decoder"
  top: "fc1-mask"
  blobs_lr: 1
  blobs_lr: 2
  inner_product_param {
    num_output: 8192
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layers {
  name: "relu4-mask"
  type: RELU
  bottom: "fc1-mask"
  top: "fc1-mask"
}
layers {
  name: "fold-mask"
  type: FOLDING
  bottom: "fc1-mask"
  top: "fold-mask"
  folding_param {
    channels_folded: 128
    height_folded: 8
    width_folded: 8
  }
}
#----------------------------mask-upsampling-16x16-convolution-relu-layer-1---------------------------
layers {
  name: "up1-mask"
  type: UPSAMPLING
  bottom: "fold-mask"
  top: "up1-mask"
  upsampling_param {
    kernel_size: 2
  }
}
layers {
  name: "conv1-mask"
  type: CONVOLUTION
  bottom: "up1-mask"
  top: "conv1-mask"
  blobs_lr: 1
  blobs_lr: 2
  convolution_param {
    num_output: 64
    kernel_size: 5
    pad: 2
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layers {
  name: "relu3-mask"
  type: RELU
  bottom: "conv1-mask"
  top: "conv1-mask"
}
#----------------------------mask-upsampling-32x32-convolution-relu-layer-2---------------------------
layers {
  name: "up2-mask"
  type: UPSAMPLING
  bottom: "conv1-mask"
  top: "up2-mask"
  upsampling_param {
    kernel_size: 2
  }
}
layers {
  name: "conv2-mask"
  type: CONVOLUTION
  bottom: "up2-mask"
  top: "conv2-mask"
  blobs_lr: 1
  blobs_lr: 2
  convolution_param {
    num_output: 32
    kernel_size: 5
    pad: 2
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layers {
  name: "relu2-mask"
  type: RELU
  bottom: "conv2-mask"
  top: "conv2-mask"
}
#----------------------------mask-upsampling-32x32-convolution-relu-layer-2---------------------------
layers {
  name: "up3-mask"
  type: UPSAMPLING
  bottom: "conv2-mask"
  top: "up3-mask"
  upsampling_param {
    kernel_size: 2
  }
}
layers {
  name: "conv3-mask"
  type: CONVOLUTION
  bottom: "up3-mask"
  top: "conv3-mask"
  blobs_lr: 1
  blobs_lr: 2
  convolution_param {
    num_output: 1
    kernel_size: 5
    pad: 2
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
  loss_weight: 1.0
}
